#!/bin/bash
set -o errexit
set -o nounset

# Configuration / defaults
venv_dir="${XSRV_VENV_DIR:=$HOME/.local/share/xsrv/venv}"
xsrv_clone_dir="${XSRV_CLONE_DIR:=$HOME/.local/share/xsrv/git}"
playbooks_dir="${XSRV_PLAYBOOKS_DIR:=$HOME/playbooks}"
editor="${EDITOR:=nano}"
ansible_tags="${TAGS:-}"
skip_venv="${SKIP_VENV:=no}"
pager="${PAGER:=nano --syntax=YAML --view +1 -}"
version="1.3.1"
ansible_version="2.10.7"
xsrv_git_url="https://gitlab.com/nodiscc/xsrv"
xsrv_upgrade_channel="release"
local_backups_dir="data/backups"
ascii_banner="  ╻ ╻┏━┓┏━┓╻ ╻
░░╺╋╸┗━┓┣┳┛┃┏┛
  ╹ ╹┗━┛╹┗╸┗┛ v${version}"

### Helpers ###

function check_playbook_exists() {
    # check that the directory for the specified playbook exists, exit with error if not
    if [[ ! -e "$playbook_dir" ]]; then
        echo "[xsrv] ERROR: playbook $playbook_dir does not exist"; exit 1;
    fi
}

function _check_host_name() {
    # check if host_vars files exist for a host, set host_vars_file and host_vault_file global variables
    check_playbook_exists
    if [[ -z "$host_name" ]]; then
        host_vars_dirs=$(find "$playbooks_dir/$playbook_name/host_vars/" -maxdepth 1 -type d)
        host_name="${host_vars_dirs##*/}"
        echo "[xsrv] INFO: no host name provided, using $host_name as host name"
        if [[ ! $(echo "$host_name" | wc -l) -eq 1 ]]; then
            echo "[xsrv] ERROR: no host name specified and multiple hosts found in playbook"; exit 1
        fi
    fi
    host_vars_file="$playbooks_dir/$playbook_name/host_vars/$host_name/$host_name.yml"
    host_vault_file="$playbooks_dir/$playbook_name/host_vars/$host_name/$host_name.vault.yml"
    if [[ ! -f "$host_vars_file" ]]; then
        echo "[xsrv] ERROR: $host_vars_file does not exist"; exit 1
    fi
}

function check_group_name() {
    # check if group_vars files exist for a group, set group_vars_file global variable
    check_playbook_exists
    group_name="$host_name"
    if [[ -z "$group_name" ]]; then
        echo "[xsrv] INFO: no group name provided, editing variables for group 'all'"
        group_name="all"
    fi
    group_vars_file="$playbooks_dir/$playbook_name/group_vars/$group_name.yml"
    if [[ ! -f "$group_vars_file" ]]; then
        echo "[xsrv] INFO: $group_vars_file does not exist, will be created";
    fi
}


function init_venv() {
    # create a virtualenv, activate it and install dependencies
    if [[ ! "$skip_venv" == "yes" ]]; then
        echo "[xsrv] INFO: creating virtualenv in $venv_dir"
        mkdir -p "$venv_dir"
        python3 -m venv "$venv_dir"
    fi
    source "$venv_dir/bin/activate"
    if [[ ! "$skip_venv" == "yes" ]]; then
        echo "[xsrv] INFO: installing ansible in $venv_dir"
        pip3 install wheel
        pip3 install ansible==2.10.3 mitogen
    fi
}

function _get_host_var() {
    # get a host var using ansible -m debug | grep
    # $1: the variable to get, filters allowed (example: "ansible_ssh_port|default(22)")
    (cd "$playbook_dir" && ansible --one-line \
      --inventory "$playbook_dir"/inventory.yml \
      --module-name debug --args \
      "msg={{ $1 }}" "$host_name" | \
      grep -oP '(?<="msg": ").*(?="})')
}

function gen_vault_password_file() {
    # generate a random password for ansible-vault and store it in a file
    echo "[xsrv] INFO: Generating random password for ansible-vault"
    openssl rand -base64 32 > "$playbooks_dir/$playbook_name/.ansible-vault-password"
    echo "[xsrv] INFO: vault password stored in $playbooks_dir/$playbook_name/.ansible-vault-password"
    echo "[xsrv] INFO: Keep this file private! Keep backups of this file!"
}

function gen_random_passwords() {
    # replace CHANGEMEXX values in file $1, where XX is an integer, with random password with length = XX
    host_vault_file="$1"
    if ! command -v pwgen >/dev/null; then
        echo "[xsrv] WARNING: pwgen not installed, unable to generate random passwords for $host_name. Please manually replace any values labeled CHANGEME!"
        return
    fi
    echo "[xsrv] INFO: generating random passwords for $host_name"
    randomized_vault=$(while read -r line; do
        if echo "$line" | grep -E 'CHANGEME[0-9]+' 2>&1 >/dev/null; then
            num_char=$(echo "$line" | grep -oP '(?<=CHANGEME)[0-9]+(?=")')
            echo "$line" | sed -E "s/CHANGEME[0-9]+/$(pwgen -s "$num_char" 1)/"
        else
            echo "$line"
        fi
    done < "$host_vault_file")
    echo "$randomized_vault" > "$host_vault_file"
}


### Commands ###

function help() {
    # show help
    echo "$usage"
    exit 1
}

function check() {
    # run ansible playbook in check mode
    check_playbook_exists
    if [[ ! -z "$host_name" ]]; then ansible_host_arg="--limit=$host_name"; else ansible_host_arg=""; fi
    if [[ ! -z "$ansible_tags" ]]; then ansible_tags_arg="--tags=$ansible_tags"; else ansible_tags_arg=""; fi
    cd "$playbooks_dir/$playbook_name"
    echo "[xsrv] INFO: deploying playbook $playbook_name"
    ansible-playbook playbook.yml --check --diff $ansible_tags_arg $ansible_host_arg
}

function deploy() {
    # run ansible playbook
    if [[ ! -z "$host_name" ]]; then ansible_host_arg="--limit=$host_name"; else ansible_host_arg=""; fi
    if [[ ! -z "$ansible_tags" ]]; then ansible_tags_arg="--tags=$ansible_tags"; else ansible_tags_arg=""; fi
    cd "$playbooks_dir/$playbook_name"
    echo "[xsrv] INFO: deploying playbook $playbook_name"
    ansible-playbook playbook.yml $ansible_tags_arg $ansible_host_arg
}

function edit_playbook() {
    # edit a playbook file
    playbook_file="$playbooks_dir/$playbook_name/playbook.yml"
    echo "[xsrv] INFO: opening playbook file $playbook_file"
    $editor "$playbook_file"
}

function edit_inventory() {
    # edit an inventory file
    inventory_file="$playbooks_dir/$playbook_name/inventory.yml"
    echo "[xsrv] INFO: opening inventory file $inventory_file"
    $editor "$inventory_file"
}

function edit_host() {
    # edit a host's vars file
    _check_host_name
    echo "[xsrv] INFO: opening host vars file $host_vars_file"
    $editor "$host_vars_file"
}

function edit_group() {
    # edit group variables
    check_group_name
    echo "[xsrv] INFO: opening group_vars file $group_vars_file"
    $editor "$group_vars_file"
}

function edit_vault() {
    # edit a host's vault file
    _check_host_name
    cd "$playbooks_dir/$playbook_name"
    EDITOR="$editor" ansible-vault edit "$host_vault_file"
}

function init_playbook() {
    # initialize a new playbook (default roles)
    if [[ -e "$playbook_dir" ]]; then
        echo "[xsrv] ERROR: $playbook_dir already exists"; exit 1
    fi
    mkdir -p "$playbook_dir"
    upgrade_roles
    echo "[xsrv] INFO: creating files and directories for $playbook_name"
    templates_dir="$playbook_dir/ansible_collections/nodiscc/xsrv/playbooks/xsrv"
    cp -rn "$templates_dir"/{ansible.cfg,README.md,requirements.yml,data/,group_vars/,public_keys/,playbooks/} "$playbook_dir/"
    gen_vault_password_file
    init_host
    echo "[xsrv] INFO: playbook $playbook_name initialized in $playbook_dir"
    echo "[xsrv] INFO: run $0 deploy to apply configuration now, or $0 help for more options"
}

function init_host() {
    # add a new host to a playbook (from template files)
    check_playbook_exists
    until [[ ! -z "$host_name" ]]; do
        read -r -p "[xsrv] Host name to add to the $playbook_name playbook (ex: my.CHANGEME.org): " host_name
    done
    if [[ -e "$playbook_dir/host_vars/$host_name" ]]; then
        echo "[xsrv] ERROR: $playbook_dir/host_vars/$host_name already exists"; exit 1
    fi
    echo "[xsrv] INFO: adding $host_name to the last inventory group"
    echo "    $host_name:" >> "$playbook_dir/inventory.yml"
    echo "[xsrv] INFO: adding default play for $host_name to the playbook"
    templates_dir="$playbook_dir/ansible_collections/nodiscc/xsrv/playbooks/xsrv"
    sed "s/my.example.org/$host_name/g" "$templates_dir/playbook.yml" >> "$playbook_dir/playbook.yml"
    echo "[xsrv] INFO: creating default host vars file for $host_name"
    mkdir -p "$playbook_dir/host_vars/$host_name"
    host_vars_file="$playbook_dir/host_vars/$host_name/$host_name.yml"
    sed "s/my.example.org/$host_name/g" "$templates_dir/host_vars/my.example.org/my.example.org.yml" > "$host_vars_file"
    echo "[xsrv] INFO: creating default vault file for $host_name"
    host_vault_file="$playbook_dir/host_vars/$host_name/$host_name.vault.yml"
    sed "s/my.example.org/$host_name/g" "$templates_dir/host_vars/my.example.org/my.example.org.vault.yml" > "$host_vault_file"
    gen_random_passwords "$host_vault_file"
    edit_playbook "$playbook_name"
    edit_host "$playbook_name" "$host_name"
    echo "[xsrv] INFO: Encrypting secrets file"
    (cd "$playbook_dir/" && ansible-vault encrypt "$playbook_dir/host_vars/$host_name/$host_name.vault.yml")
    edit_vault "$playbook_name" "$host_name"
    echo "[xsrv] INFO: Host is ready for deployment. Run xsrv deploy $playbook_name $host_name"
}

function run_shell() {
    # open a SSH shell on a host
    _check_host_name
    ssh_user=$(_get_host_var "ansible_user")
    ssh_port=$(_get_host_var "ansible_ssh_port|default(22)")
    ssh_command="ssh -t -p $ssh_port $ssh_user@$host_name $ssh_args"
    $ssh_command
}

function _ls() {
    # list files in the playbooks directory
    path=${1:-}
    ls "$playbooks_dir/$path"
}

function fetch_backups() {
    # fetch latest daily backups from the host
    check_playbook_exists
    ssh_port=$(_get_host_var "ansible_ssh_port|default(22)")
    ssh_user=$(_get_host_var "ansible_user")
    backup_date=$(date "+%Y%m%d_%H%M%S")
    echo "[xsrv] INFO: fetching latest daily backups from $host_name in playbook $playbook_name"
    rsync --archive --verbose --rsh="ssh -p $ssh_port" \
      --progress --fake-super --rsync-path='/usr/bin/sudo /usr/bin/rsync' \
      "$ssh_user@$host_name:/var/backups/rsnapshot/daily.0/" \
      "$playbooks_dir/$playbook_name/$local_backups_dir/daily.0.$backup_date"
}

function upgrade_roles() {
    check_playbook_exists
    if [[ ! -f "$playbook_dir"/requirements.yml ]]; then
        echo "[xsrv] INFO: installing default collection git+$xsrv_git_url,$xsrv_upgrade_channel"
        (cd "$playbook_dir" && ansible-galaxy collection install --force --collections-path "$playbook_dir/" git+$xsrv_git_url,$xsrv_upgrade_channel)
    else
        echo "[xsrv] INFO: upgrading collections from requirements.yml"
        (cd "$playbook_dir" && ansible-galaxy collection install --force -r requirements.yml)
    fi
}

function show_defaults() {
    # show all role defaults
    role=${2:-}
    check_playbook_exists
    if ! hash "${pager%% *}" 2>/dev/null; then
        echo "[xsrv] INFO: pager command '$pager' unavailable, falling back to 'less'"
        pager="less"
    fi
    if [[ ! -z "$role" ]]; then
        cat "$playbook_dir"/ansible_collections/*/*/roles/"$role"/defaults/main.yml | $pager 2>/dev/null
    else
        # shellcheck disable=SC2002
        defaults_header="# List of all role configuration variables, and their default values.\\n# Copy any variable to your host configuration and edit its value there.\\n######################################################\\n\\n"
        default_files=$(find "$playbook_dir"/ansible_collections/*/*/roles/*/defaults/ -name main.yml)
        defaults_list=$(for file in $default_files; do
            cat "$file"; echo -e "\\n\\n###################################################################"
        done)
        echo -e "$defaults_header""$defaults_list" | $pager 2>/dev/null
    fi
}

function self_upgrade() {
    # upgrade the running xsrv script in-place
    script_path="$0"
    echo "[xsrv] INFO fetching latest release..."
    if [[ -d "$xsrv_clone_dir/.git" ]]; then
       git -C "$xsrv_clone_dir" pull
       git -C "$xsrv_clone_dir" checkout "$xsrv_upgrade_channel"
    else
      git clone -b "$xsrv_upgrade_channel" "$xsrv_git_url" "$xsrv_clone_dir"
    fi
    new_version="$(grep '^version=.*' "$xsrv_clone_dir/xsrv" | cut -d= -f2)"
    new_commit="$(git -C "$xsrv_clone_dir" rev-parse HEAD)"
    read -r -p "[xsrv] INFO: this will upgrade the script at $script_path ($version) to $new_version ($new_commit). Type YES to confirm: " confirm_upgrade
    if [[ "$confirm_upgrade" == "YES" ]]; then
        if [[ -w "$script_path" ]]; then
            echo "[xsrv] INFO: $script_path is writeable"
            cp "$xsrv_clone_dir/xsrv" "$script_path"
            echo "[xsrv] INFO: upgrade complete"
            exit 0
        else
            echo "[xsrv] INFO: $script_path is not writeable. Upgrading with sudo"
            sudo cp -v "$xsrv_clone_dir/xsrv" "$script_path"
            echo "[xsrv] INFO: upgrade complete"
            exit 0
        fi
    else
        echo "[xsrv] ERROR: did not enter YES, aborting"
        exit 1
    fi
}

############################

function _main() {
    echo "$ascii_banner"
    if [[ -z "$command" ]]; then echo "[xsrv] ERROR: no command provided"; echo "$usage"; exit 1; fi
    case "$command" in
        "init-playbook") init_venv; shift; init_playbook ;;
        "init-host") init_venv; shift; init_host ;;
        "deploy") check_playbook_exists; init_venv; shift; deploy ;;
        "check") init_venv; shift; check ;;
        "edit-playbook") shift; edit_playbook ;;
        "edit-inventory") shift; edit_inventory ;;
        "edit-host") shift; edit_host ;;
        "edit-group") shift; edit_group;;
        "edit-vault") init_venv; shift; edit_vault ;;
        "shell") init_venv; shift; run_shell ;;
        "logs") init_venv; shift; ssh_args="sudo lnav /var/log/syslog"; run_shell ;;
        "ls") shift; _ls "$@" ;;
        "help") echo "$usage" ;;
        "fetch-backups") init_venv; shift; fetch_backups ;;
        "upgrade") init_venv; shift; upgrade_roles ;;
        "show-defaults") shift; show_defaults "$@";;
        "self-upgrade") self_upgrade;;
        *) echo "[xsrv] ERROR: unrecognized command $command"; exit 1 ;;
    esac
}


############################

# Usage
usage="
USAGE: xsrv COMMAND [playbook] [host]

# PLAYBOOK-LEVEL COMMANDS
init-playbook [playbook]         initialize a new playbook
edit-playbook [playbook]         edit/show playbook (list of roles)
edit-inventory [playbook]        edit/show inventory file (list of hosts)
show-defaults [playbook] [role]  show all variables and their default values
edit-group [playbook] [group]    edit variables for a group of hosts (default 'all')

# HOST-LEVEL COMMANDS
init-host [playbook] [host]      add a new host to an existing playbook
check [playbook] [host]          simulate deployment, report what would be changed
deploy [playbook] [host]         deploy a playbook (apply configuration/roles)
edit-host [playbook] [host]      edit host configuration (host_vars)
edit-vault [playbook] [host]     edit encrypted (vault) host configuration
fetch-backups [playbook] [host]  fetch backups from a host to the local backups/ directory
upgrade [playbook] [host]        upgrade roles to latest version
shell [playbook] [host]          open an interactive shell on a host
logs [playbook] [host]           view system log on a host
ls                               list files in the playbooks directory (accepts a path)
help                             show this message

# OTHER COMMANDS
self-upgrade                     check for new releases/upgrade the xsrv script in-place

# ENVIRONMENT VARIABLES (usage: VARIABLE=VALUE xsrv COMMAND)
TAGS               comma-separated list of ansible tags (eg. TAGS=common,monitoring xsrv deploy)
SKIP_VENV          advanced: skip installation of pip dependencies (yes/no, default: no)
EDITOR             text editor to use (default: nano)
PAGER              pager to use (default: nano --syntax=YAML --view +1 -)
"

command="${1:-}"
playbook_name="${2:-default}"
playbook_dir="$playbooks_dir/$playbook_name"
host_name="${3:-}"
ssh_args=""

_main "$@"
